// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/hibiken/asynq"
	"github.com/milhamh95/simplebank/worker"
)

type FakeTaskDistributor struct {
	DistributeTaskSenderVerifyEmailStub        func(context.Context, *worker.PayloadSendVerifyEmail, ...asynq.Option) error
	distributeTaskSenderVerifyEmailMutex       sync.RWMutex
	distributeTaskSenderVerifyEmailArgsForCall []struct {
		arg1 context.Context
		arg2 *worker.PayloadSendVerifyEmail
		arg3 []asynq.Option
	}
	distributeTaskSenderVerifyEmailReturns struct {
		result1 error
	}
	distributeTaskSenderVerifyEmailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskDistributor) DistributeTaskSenderVerifyEmail(arg1 context.Context, arg2 *worker.PayloadSendVerifyEmail, arg3 ...asynq.Option) error {
	fake.distributeTaskSenderVerifyEmailMutex.Lock()
	ret, specificReturn := fake.distributeTaskSenderVerifyEmailReturnsOnCall[len(fake.distributeTaskSenderVerifyEmailArgsForCall)]
	fake.distributeTaskSenderVerifyEmailArgsForCall = append(fake.distributeTaskSenderVerifyEmailArgsForCall, struct {
		arg1 context.Context
		arg2 *worker.PayloadSendVerifyEmail
		arg3 []asynq.Option
	}{arg1, arg2, arg3})
	stub := fake.DistributeTaskSenderVerifyEmailStub
	fakeReturns := fake.distributeTaskSenderVerifyEmailReturns
	fake.recordInvocation("DistributeTaskSenderVerifyEmail", []interface{}{arg1, arg2, arg3})
	fake.distributeTaskSenderVerifyEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskDistributor) DistributeTaskSenderVerifyEmailCallCount() int {
	fake.distributeTaskSenderVerifyEmailMutex.RLock()
	defer fake.distributeTaskSenderVerifyEmailMutex.RUnlock()
	return len(fake.distributeTaskSenderVerifyEmailArgsForCall)
}

func (fake *FakeTaskDistributor) DistributeTaskSenderVerifyEmailCalls(stub func(context.Context, *worker.PayloadSendVerifyEmail, ...asynq.Option) error) {
	fake.distributeTaskSenderVerifyEmailMutex.Lock()
	defer fake.distributeTaskSenderVerifyEmailMutex.Unlock()
	fake.DistributeTaskSenderVerifyEmailStub = stub
}

func (fake *FakeTaskDistributor) DistributeTaskSenderVerifyEmailArgsForCall(i int) (context.Context, *worker.PayloadSendVerifyEmail, []asynq.Option) {
	fake.distributeTaskSenderVerifyEmailMutex.RLock()
	defer fake.distributeTaskSenderVerifyEmailMutex.RUnlock()
	argsForCall := fake.distributeTaskSenderVerifyEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskDistributor) DistributeTaskSenderVerifyEmailReturns(result1 error) {
	fake.distributeTaskSenderVerifyEmailMutex.Lock()
	defer fake.distributeTaskSenderVerifyEmailMutex.Unlock()
	fake.DistributeTaskSenderVerifyEmailStub = nil
	fake.distributeTaskSenderVerifyEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskDistributor) DistributeTaskSenderVerifyEmailReturnsOnCall(i int, result1 error) {
	fake.distributeTaskSenderVerifyEmailMutex.Lock()
	defer fake.distributeTaskSenderVerifyEmailMutex.Unlock()
	fake.DistributeTaskSenderVerifyEmailStub = nil
	if fake.distributeTaskSenderVerifyEmailReturnsOnCall == nil {
		fake.distributeTaskSenderVerifyEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.distributeTaskSenderVerifyEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskDistributor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.distributeTaskSenderVerifyEmailMutex.RLock()
	defer fake.distributeTaskSenderVerifyEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskDistributor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.TaskDistributor = new(FakeTaskDistributor)
